import logging
import asyncio
import random
import nest_asyncio

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Jupyter/nested loops
nest_asyncio.apply()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã
(
    STATE_START,
    STATE_ACTION,
    STATE_BREAKFAST_TYPE,
    STATE_BREAKFAST,
    STATE_LUNCH_TYPE,
    STATE_LUNCH_CHOICE,
    STATE_LUNCH_CONFIRM,
    STATE_DINNER_TYPE,
    STATE_DINNER_CHOICE,
    STATE_DINNER_CONFIRM
) = range(10)

# –ú–µ–Ω—é
COFFEE_MENU = [
    "–§–∏–ª—å—Ç—Ä –∫–æ—Ñ–µ ‚òïÔ∏è", "–≠—Å–ø—Ä–µ—Å—Å–æ üîã", "–î–≤–æ–π–Ω–æ–π —ç—Å–ø—Ä–µ—Å—Å–æ ‚ö°Ô∏è", "–ö–∞–ø—É—á–∏–Ω–æ üêÆ",
    "–ë–∞–º–±–ª –∫–æ—Ñ–µ —Å —Ñ—Ä–µ—à–æ–º üçä", "–ë–∞–º–±–ª –∫–æ—Ñ–µ —Å –≤–∏—à–Ω–µ–≤—ã–º —Å–æ–∫–æ–º üçí",
    "–ß–∞–π –∑–µ–ª–µ–Ω—ã–π –≤ –∞—Å—Å üíö", "–ß–∞–π —á–µ—Ä–Ω—ã–π –≤ –∞—Å—Å üñ§", "–†–æ–º–∞—à–∫–∞ üåº"
]
SWEET_BREAKFASTS = [
    "–°—ã—Ä–Ω–∏–∫–∏",
    "–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏",
    "–û–≤—Å—è–Ω–∫–∞ —Å –∫–∞–º–∞–º–±–µ—Ä–æ–º, —Å–º–æ—Ä–æ–¥–∏–Ω–æ–π –∏ —Ä–æ–∑–º–∞—Ä–∏–Ω–æ–º",
    "–ë–ª–∏–Ω—á–∏–∫–∏",
    "–¢–≤–æ—Ä–æ–≥ —Å —Å–µ–∑–æ–Ω–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –æ—Ä–µ—à–∫–∞–º–∏",
    "–¢–≤–æ—Ä–æ–≥ —Å –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ –≥—Ä—É—à–µ–π",
    "–ó–∞–≤—Ç—Ä–∞–∫ –∏–∑ \"–õ—é–¥–∏ –ª—é–±—è—Ç\"",
    "–ó–∞–≤—Ç—Ä–∞–∫ –∏–∑ \"–ë—É—à–µ\"",
    "–ß–∏–∞ –ø—É–¥–∏–Ω–≥"
]
SAVORY_BREAKFASTS = [
    "–†—É–ª–µ—Ç–∏–∫–∏ —Å —Ç–≤–æ—Ä–æ–≥–æ–º",
    "–®–∞–∫—à—É–∫–∞",
    "–ê–≤–æ–∫–∞–¥–æ —Ç–æ—Å—Ç",
    "–Ø–π—Ü–∞ –ø–æ-—Ç—É—Ä–µ—Ü–∫–∏",
    "–ì–æ—Ä—è—á–∏–µ –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã + —è–π—Ü–∞",
    "–ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã —Å —Ç—É–Ω—Ü–æ–º",
    "–ë—Ä—É—Å–∫–µ—Ç—Ç—ã —Å –∫–∞–º–∞–º–±–µ—Ä–æ–º –∏ –±—Ä—É—Å–∫–µ—Ç—Ç–∞ —Å –æ–≥—É—Ä—á–∏–∫–∞–º–∏",
    "–û–º–ª–µ—Ç —Å –≤–µ—Ç—á–∏–Ω–æ–π –∏ —Å—ã—Ä–æ–º",
    "–ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã —Å —Ö—É–º—É—Å–æ–º –∏ —Å—ã—Ä–æ–º —Ö–∞–ª—É–º–∏",
    "–ë—Ä—É—Å–∫–µ—Ç—Ç—ã —Å –≥—Ä—É—à–µ–π –∏ –≤–µ—Ç—á–∏–Ω–æ–π",
    "–ë—Ä—É—Å–∫–µ—Ç—Ç—ã —Å —Ç–æ–º–∞—Ç–∞–º–∏",
    "–ö—Ä—É–∞—Å—Å–∞–Ω—ã —Å –±–µ–∫–æ–Ω–æ–º –∏ —è–π—Ü–æ–º",
    "–ö—Ä—É–∞—Å—Å–∞–Ω—ã —Å –ø–µ—Å—Ç–æ, –º–æ—Ä—Ç–∞–¥–µ–ª–ª–æ–π –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π",
    "–ë–µ–π–≥–ª—ã —Å –≤–µ—Ç—á–∏–Ω–æ–π, —Ç–≤–æ—Ä–æ–∂–Ω—ã–º —Å—ã—Ä–æ–º –∏ —è–π—Ü–æ–º –ë–µ–Ω–µ–¥–∏–∫—Ç"
]
LIGHT_MEALS = [
    "–¶–µ–∑–∞—Ä—å",
    "–ü–∞—Å—Ç–∞ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏, —á–µ—Å–Ω–æ–∫–æ–º, —Ç–∏–º—å—è–Ω–æ–º –∏ —Ä–æ–∑–º–∞—Ä–∏–Ω–æ–º",
    "–ö—É—Ä–∏–Ω—ã–µ —Ä–æ–ª–ª—ã",
    "–ö—É—Ä–∏–Ω—ã–π —Å—É–ø",
    "–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π –∏ –∞–Ω–∞–Ω–∞—Å–æ–º",
    "–°–∞–ª–∞—Ç —Å –∫–∏–Ω–æ–∞ –∏ –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏ (–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ—É—Å)",
    "–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π, —è–±–ª–æ–∫–∞–º–∏ –∏ —à–ø–∏–Ω–∞—Ç–æ–º",
    "–°–∞–ª–∞—Ç —Å –º–æ—Ä–∫–æ–≤–∫–æ–π –∏ —Å—ã—Ä–æ–º"
]
HEARTY_MEALS = [
    "–ó–∞–ø–µ—á–µ–Ω–Ω—ã–µ –∫—É—Ä–∏–Ω—ã–µ –±–µ–¥—Ä–∞ –≤ —Å–º–µ—Ç–∞–Ω–µ —Å –º–∞–∫–∞—Ä–æ–Ω–∞–º–∏",
    "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
    "–ü–∞—Å—Ç–∞ –ë–æ–ª–æ–Ω—å–µ–∑–µ",
    "–ö—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç–∫–∏ —Å —Å—ã—Ä–æ–º",
    "–ë–µ–ª–∞—è —Ä—ã–±–∞ –ø–æ–¥ —Å–æ—É—Å–æ–º –∏–∑ –º–∞–∑–∏–∫–∞ –∏ —Å—ã—Ä–∞ + –ø–µ—á–µ–Ω—ã–µ –æ–≤–æ—â–∏",
    "–ö—Ä–∞—Å–Ω–∞—è —Ä—ã–±–∞ —Å —Ç–µ—Ä–∏—è–∫–∏",
    "–ö—Ä–∞—Å–Ω–∞—è —Ä—ã–±–∞ –≤ —Å–ª–∏–≤–∫–∞—Ö",
    "–ö—É—Ä–æ—á–∫–∞ –ì–æ—Ä–¥–æ–Ω–∞ –†–∞–º–∑–∏",
    "–ü–µ–ª—å–º–µ–Ω–∏",
    "–ñ–∞—Ä–µ–Ω—ã–π —Ä–∏—Å –ø–æ-–∞–∑–∏–∞—Ç—Å–∫–∏",
    "–î—Ä–∞–Ω–∏–∫–∏",
    "–ö–∞–Ω–Ω–µ–ª–ª–æ–Ω–∏ —Å —Å–æ—É—Å–æ–º –∏–∑ —Ä–∏–∫–æ—Ç—Ç—ã –∏ —à–ø–∏–Ω–∞—Ç–∞ –Ω–∞ –æ–≤–æ—â–Ω–æ–π –ø–æ–¥—É—à–∫–µ",
    "–§—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏ —Å –ø—é—Ä–µ",
    "–ñ—É–ª—å–µ–Ω",
    "–û—Ç–±–∏–≤–Ω—ã–µ —Å –≥—Ä–∏–±–∞–º–∏",
    "–ì–æ–ª—É–±—Ü—ã –∏–∑ –ü–µ–∫–∏–Ω—Å–∫–æ–π –∫–∞–ø—É—Å—Ç—ã",
    "–ß–∫–º–µ—Ä—É–ª–∏",
    "–ß–∞—Ö–æ—Ö–±–∏–ª–∏",
    "–ü–∞—Å—Ç–∞ —Å –ø–µ—Å—Ç–æ –∏ –≥—Ä–∏–±–∞–º–∏",
    "–ú–∞–∫–∞—Ä–æ–Ω—ã —Å —Å–æ—Å–∏—Å–∫–∞–º–∏",
    "–†–∏–∑–æ—Ç—Ç–æ",
    "–ü—Ç–∏—Ç–∏–º",
    "–ú—è—Å–æ –≤ –≥–æ—Ä—à–æ—á–∫–∞—Ö",
    "–õ–∞–∑–∞–Ω—å—è",
    "–ì—Ä–µ—á–∫–∞ —Å –≥—Ä–∏–±–∞–º–∏ –∏ –∫—É—Ä–∏—Ü–µ–π",
    "–ú—É—Å–∞–∫–∞"
]

BREAKFAST_INGREDIENTS = {
    "–°—ã—Ä–Ω–∏–∫–∏": ["—Ç–≤–æ—Ä–æ–≥", "—è–π—Ü–∞", "—Å–º–µ—Ç–∞–Ω–∞"],
    "–†—É–ª–µ—Ç–∏–∫–∏ —Å —Ç–≤–æ—Ä–æ–≥–æ–º": ["—Ç–≤–æ—Ä–æ–≥", "–ª–∞–≤–∞—à", "—Å—ã—Ä", "—Å–º–µ—Ç–∞–Ω–∞", "—É–∫—Ä–æ–ø"],
    "–®–∞–∫—à—É–∫–∞": ["–ø–æ–º–∏–¥–æ—Ä—ã", "—Ç–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞", "—á–µ—Å–Ω–æ–∫", "–ø–µ—Ä–µ—Ü", "–∫–∏–Ω–∑–∞", "—Ç–≤–æ—Ä–æ–∂–Ω—ã–π —Å—ã—Ä", "—è–π—Ü–∞", "—á–∏–∞–±–∞—Ç—Ç–∞"],
    "–ê–≤–æ–∫–∞–¥–æ —Ç–æ—Å—Ç": ["—Ö–ª–µ–±", "–∞–≤–æ–∫–∞–¥–æ", "—è–π—Ü–∞"],
    "–Ø–π—Ü–∞ –ø–æ-—Ç—É—Ä–µ—Ü–∫–∏": ["—è–π—Ü–∞", "–≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç", "—á–µ—Å–Ω–æ–∫", "–∫–∏–Ω–∑–∞", "—Ö–ª–µ–±"],
    "–ì–æ—Ä—è—á–∏–µ –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã + —è–π—Ü–∞": ["–±—É–ª–∫–∞", "—Å—ã—Ä", "—è–π—Ü–∞", "–≤–µ—Ç—á–∏–Ω–∞"],
    "–ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã —Å —Ç—É–Ω—Ü–æ–º": ["—Ç—É–Ω–µ—Ü –≤ –±–∞–Ω–∫–µ", "–º–∞–∑–∏–∫", "—Å–µ–ª—å–¥–µ—Ä–µ–π", "–ª—É–∫ –∫—Ä–∞—Å–Ω—ã–π", "—Å–æ–ª–µ–Ω—ã–µ –æ–≥—É—Ä—Ü—ã", "–≥–æ—Ä—á–∏—Ü–∞ –∑–µ—Ä–Ω–∏—Å—Ç–∞—è"],
    "–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏": ["–æ–≤—Å—è–Ω–∫–∞", "–º–æ–ª–æ–∫–æ", "—Ñ—Ä—É–∫—Ç—ã", "–º–µ–¥"],
    "–û–≤—Å—è–Ω–∫–∞ —Å –∫–∞–º–∞–º–±–µ—Ä–æ–º, —Å–º–æ—Ä–æ–¥–∏–Ω–æ–π –∏ —Ä–æ–∑–º–∞—Ä–∏–Ω–æ–º": ["–æ–≤—Å—è–Ω–∫–∞", "–∫–∞–º–∞–º–±–µ—Ä", "–º–æ–ª–æ–∫–æ", "—Å–º–æ—Ä–æ–¥–∏–Ω–∞ –∏–ª–∏ –≤–∏—à–Ω—è", "—Ä–æ–∑–º–∞—Ä–∏–Ω"],
    "–ë—Ä—É—Å–∫–µ—Ç—Ç—ã —Å –∫–∞–º–∞–º–±–µ—Ä–æ–º –∏ –±—Ä—É—Å–∫–µ—Ç—Ç–∞ —Å –æ–≥—É—Ä—á–∏–∫–∞–º–∏": ["—á–∏–∞–±–∞—Ç—Ç–∞", "—Ö–ª–µ–±", "—Ç–≤–æ—Ä–æ–∂–Ω—ã–π —Å—ã—Ä", "–æ–≥—É—Ä—Ü—ã —Å–≤–µ–∂–∏–µ", "–∫–∞–º–∞–º–±–µ—Ä", "—è–π—Ü–∞", "–º–æ–ª–æ–∫–æ"],
    "–û–º–ª–µ—Ç —Å –≤–µ—Ç—á–∏–Ω–æ–π –∏ —Å—ã—Ä–æ–º": ["—è–π—Ü–∞", "–≤–µ—Ç—á–∏–Ω–∞", "—Å—ã—Ä"],
    "–ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã —Å —Ö—É–º—É—Å–æ–º –∏ —Å—ã—Ä–æ–º —Ö–∞–ª—É–º–∏": ["—Ö–ª–µ–±", "—Ö—É–º—É—Å", "—è–π—Ü–∞", "—Ö–∞–ª—É–º–∏"],
    "–ë–ª–∏–Ω—á–∏–∫–∏": ["–º–æ–ª–æ–∫–æ", "—è–π—Ü–∞"],
    "–ë—Ä—É—Å–∫–µ—Ç—Ç—ã —Å –≥—Ä—É—à–µ–π –∏ –≤–µ—Ç—á–∏–Ω–æ–π": ["—á–∏–∞–±–∞—Ç—Ç–∞", "–≥—Ä—É—à–∞", "–≤–µ—Ç—á–∏–Ω–∞", "–≥–æ—Ä—á–∏—Ü–∞", "–ª–∏–º–æ–Ω", "—Å—ã—Ä —Ñ–µ—Ç–∞"],
    "–ë—Ä—É—Å–∫–µ—Ç—Ç—ã —Å —Ç–æ–º–∞—Ç–∞–º–∏": ["—á–∏–∞–±–∞—Ç—Ç–∞", "—Ç–æ–º–∞—Ç—ã", "–ø–∞—Ä–º–µ–∑–∞–Ω"],
    "–¢–≤–æ—Ä–æ–≥ —Å —Å–µ–∑–æ–Ω–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –æ—Ä–µ—à–∫–∞–º–∏": ["—Ç–≤–æ—Ä–æ–≥ –∑–µ—Ä–Ω–∏—Å—Ç—ã–π", "—Ñ—Ä—É–∫—Ç—ã", "–æ—Ä–µ—Ö–∏ –ª—é–±—ã–µ", "—Å–º–µ—Ç–∞–Ω–∞"],
    "–¢–≤–æ—Ä–æ–≥ —Å –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ –≥—Ä—É—à–µ–π": ["—Ç–≤–æ—Ä–æ–≥ –∑–µ—Ä–Ω–∏—Å—Ç—ã–π", "–ø–∞—Ä–º–µ–∑–∞–Ω", "—Å–º–µ—Ç–∞–Ω–∞", "–≥—Ä—É—à–∞"],
    "–ó–∞–≤—Ç—Ä–∞–∫ –∏–∑ \"–õ—é–¥–∏ –ª—é–±—è—Ç\"": ["–ì–æ—Ç–æ–≤—å –±–∞–±–∫–∏"],
    "–ó–∞–≤—Ç—Ä–∞–∫ –∏–∑ \"–ë—É—à–µ\"": ["–ì–æ—Ç–æ–≤—å –±–∞–±–∫–∏"],
    "–ö—Ä—É–∞—Å—Å–∞–Ω—ã —Å –±–µ–∫–æ–Ω–æ–º –∏ —è–π—Ü–æ–º": ["–∫—Ä—É–∞—Å—Å–∞–Ω—ã", "–±–µ–∫–æ–Ω", "—Å—ã—Ä", "—è–π—Ü–∞"],
    "–ö—Ä—É–∞—Å—Å–∞–Ω—ã —Å –ø–µ—Å—Ç–æ, –º–æ—Ä—Ç–∞–¥–µ–ª–ª–æ–π –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π": ["–∫—Ä—É–∞—Å—Å–∞–Ω—ã", "–ø–µ—Å—Ç–æ", "–º–æ—Ä—Ç–∞–¥–µ–ª–ª–∞", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞"],
    "–ß–∏–∞ –ø—É–¥–∏–Ω–≥": ["—Å–µ–º–µ–Ω–∞ —á–∏–∞", "–º–æ–ª–æ–∫–æ", "—è–≥–æ–¥—ã"],
    "–ë–µ–π–≥–ª—ã —Å –≤–µ—Ç—á–∏–Ω–æ–π, —Ç–≤–æ—Ä–æ–∂–Ω—ã–º —Å—ã—Ä–æ–º –∏ —è–π—Ü–æ–º –ë–µ–Ω–µ–¥–∏–∫—Ç": ["—á–∏–∞–±–∞—Ç—Ç–∞", "–≤–µ—Ç—á–∏–Ω–∞", "—Ç–≤–æ—Ä–æ–∂–Ω—ã–π —Å—ã—Ä", "—è–π—Ü–∞"]
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def kb_main():
    return ReplyKeyboardMarkup(
        ["üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å üçΩ", "–ö–æ—Ñ–µ–π–Ω—è ‚òïÔ∏è"],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_action():
    return ReplyKeyboardMarkup(
        [["–°–æ—Å—Ç–∞–≤–ª—é –º–µ–Ω—é —Å–∞–º", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –º–µ–Ω—é"]],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_breakfast_type():
    return ReplyKeyboardMarkup(
        [["–°–ª–∞–¥–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "–°–æ–ª—ë–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"], ["–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"]],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_lunch_type():
    return ReplyKeyboardMarkup(
        [["–õ—ë–≥–∫–∏–π –æ–±–µ–¥", "–°—ã—Ç–Ω—ã–π –æ–±–µ–¥"], ["–°–ª—É—á–∞–π–Ω—ã–π –æ–±–µ–¥"], ["–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–±–µ–¥"]],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_dinner_type():
    return ReplyKeyboardMarkup(
        [["–õ—ë–≥–∫–∏–π —É–∂–∏–Ω", "–°—ã—Ç–Ω—ã–π —É–∂–∏–Ω"], ["–°–ª—É—á–∞–π–Ω—ã–π —É–∂–∏–Ω"], ["–£ –º–µ–Ω—è –µ—Å—Ç—å —É–∂–∏–Ω"]],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_confirm():
    return ReplyKeyboardMarkup(
        [["–î–∞", "–ù–µ—Ç"]],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_breakfast_type():
    return ReplyKeyboardMarkup(
        [["–°–ª–∞–¥–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "–°–æ–ª—ë–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"], ["–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"], ["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_lunch_type():
    return ReplyKeyboardMarkup(
        [["–õ—ë–≥–∫–∏–π –æ–±–µ–¥", "–°—ã—Ç–Ω—ã–π –æ–±–µ–¥"], ["–°–ª—É—á–∞–π–Ω—ã–π –æ–±–µ–¥"], ["–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–±–µ–¥"], ["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True, one_time_keyboard=True
    )

def kb_dinner_type():
    return ReplyKeyboardMarkup(
        [["–õ—ë–≥–∫–∏–π —É–∂–∏–Ω", "–°—ã—Ç–Ω—ã–π —É–∂–∏–Ω"], ["–°–ª—É—á–∞–π–Ω—ã–π —É–∂–∏–Ω"], ["–£ –º–µ–Ω—è –µ—Å—Ç—å —É–∂–∏–Ω"], ["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True, one_time_keyboard=True
    )

# (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=kb_main()
    )
    return STATE_START

async def lunch_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–î–∞":
        context.user_data['lunch'] = "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–µ–∑–ª–æ! –û–±–µ–¥ —É–∂–µ –µ—Å—Ç—å!"
    else:
        context.user_data['lunch'] = random.choice(LIGHT_MEALS + HEARTY_MEALS)
    await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —É–∂–∏–Ω?", reply_markup=kb_confirm())
    return STATE_DINNER_CONFIRM

async def dinner_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    lunch = context.user_data.get("lunch")
    all_meals = LIGHT_MEALS + HEARTY_MEALS
    if text == "–î–∞":
        context.user_data['dinner'] = "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–µ–∑–ª–æ! –£–∂–∏–Ω —É–∂–µ –µ—Å—Ç—å!"
    else:
        remaining = [m for m in all_meals if m != lunch]
        context.user_data['dinner'] = random.choice(remaining)
    return await show_summary(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await start(update, context)
    if text == "–ö–æ—Ñ–µ–π–Ω—è ‚òïÔ∏è":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:",
            reply_markup=ReplyKeyboardMarkup([[c] for c in COFFEE_MENU], resize_keyboard=True)
        )
        return STATE_ACTION
    if text in COFFEE_MENU:
        await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ ‚ù§Ô∏è", reply_markup=kb_main())
        user = update.message.from_user
        order = (
            f"‚òïÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
            f"üë§ {user.full_name} (@{user.username})\n"
            f"üìå –ù–∞–ø–∏—Ç–æ–∫: {text}"
        )
        await context.bot.send_message(chat_id=674860394, text=order)
        return STATE_START
    if text == "–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å üçΩ":
        await update.message.reply_text("–°–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–∏–º –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:", reply_markup=kb_action())
        return STATE_ACTION
    if text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –º–µ–Ω—é":
        context.user_data['breakfast'] = random.choice(SWEET_BREAKFASTS + SAVORY_BREAKFASTS)
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–±–µ–¥?", reply_markup=kb_confirm())
        return STATE_LUNCH_CONFIRM
    if text == "–°–æ—Å—Ç–∞–≤–ª—é –º–µ–Ω—é —Å–∞–º":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–≤—Ç—Ä–∞–∫:", reply_markup=kb_breakfast_type())
        return STATE_BREAKFAST_TYPE
    return STATE_START

# –ó–∞–≤—Ç—Ä–∞–∫
async def breakfast_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())
        return STATE_START
    if text == "–°–ª–∞–¥–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫":
        options = SWEET_BREAKFASTS
    elif text == "–°–æ–ª—ë–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫":
        options = SAVORY_BREAKFASTS
    else:
        context.user_data['breakfast'] = random.choice(SWEET_BREAKFASTS + SAVORY_BREAKFASTS)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±–µ–¥–∞:", reply_markup=kb_lunch_type())
        return STATE_LUNCH_TYPE
    buttons = [[b] for b in options] + [["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text(
    "–í—ã–±–µ—Ä–∏ –∑–∞–≤—Ç—Ä–∞–∫:",
    reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return STATE_BREAKFAST

async def breakfast_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–≤—Ç—Ä–∞–∫–∞:", reply_markup=kb_breakfast_type())
        return STATE_BREAKFAST_TYPE
    context.user_data['breakfast'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±–µ–¥–∞:", reply_markup=kb_lunch_type())
    return STATE_LUNCH_TYPE

# –û–±–µ–¥
async def lunch_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–≤—Ç—Ä–∞–∫:", reply_markup=kb_breakfast_type())
        return STATE_BREAKFAST_TYPE
    if text == "–õ—ë–≥–∫–∏–π –æ–±–µ–¥":
        options = LIGHT_MEALS
    elif text == "–°—ã—Ç–Ω—ã–π –æ–±–µ–¥":
        options = HEARTY_MEALS
    elif text == "–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–±–µ–¥":
        context.user_data['lunch'] = "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–µ–∑–ª–æ! –û–±–µ–¥ —É–∂–µ –µ—Å—Ç—å!"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É–∂–∏–Ω–∞:", reply_markup=kb_dinner_type())
        return STATE_DINNER_TYPE
    else:
        context.user_data['lunch'] = random.choice(LIGHT_MEALS + HEARTY_MEALS)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É–∂–∏–Ω–∞:", reply_markup=kb_dinner_type())
        return STATE_DINNER_TYPE
    buttons = [[m] for m in options] + [["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text(
    "–í—ã–±–µ—Ä–∏ –æ–±–µ–¥:",
    reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return STATE_LUNCH_CHOICE

async def lunch_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±–µ–¥–∞:", reply_markup=kb_lunch_type())
        return STATE_LUNCH_TYPE
    context.user_data['lunch'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É–∂–∏–Ω–∞:", reply_markup=kb_dinner_type())
    return STATE_DINNER_TYPE

# –£–∂–∏–Ω
async def dinner_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±–µ–¥–∞:", reply_markup=kb_lunch_type())
        return STATE_LUNCH_TYPE
    if text == "–õ—ë–≥–∫–∏–π —É–∂–∏–Ω":
        options = LIGHT_MEALS
    elif text == "–°—ã—Ç–Ω—ã–π —É–∂–∏–Ω":
        options = HEARTY_MEALS
    elif text == "–£ –º–µ–Ω—è –µ—Å—Ç—å —É–∂–∏–Ω":
        context.user_data['dinner'] = "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–µ–∑–ª–æ! –£–∂–∏–Ω —É–∂–µ –µ—Å—Ç—å!"
        return await show_summary(update, context)
    else:
        context.user_data['dinner'] = random.choice(LIGHT_MEALS + HEARTY_MEALS)
        return await show_summary(update, context)
    buttons = [[m] for m in options] + [["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text(
    "–í—ã–±–µ—Ä–∏ —É–∂–∏–Ω:",
    reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return STATE_DINNER_CHOICE

async def dinner_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É–∂–∏–Ω–∞:", reply_markup=kb_dinner_type())
        return STATE_DINNER_TYPE
    context.user_data['dinner'] = update.message.text
    return await show_summary(update, context)

async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üçΩ –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:\n"
        f"ü•£ –ó–∞–≤—Ç—Ä–∞–∫: {context.user_data['breakfast']}\n"
        f"üçõ –û–±–µ–¥: {context.user_data['lunch']}\n"
        f"üåô –£–∂–∏–Ω: {context.user_data['dinner']}",
        reply_markup=kb_main()
    )

    await show_shopping_list(update, context)
    return STATE_START

async def show_shopping_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    breakfast = context.user_data.get("breakfast")
    ingredients = BREAKFAST_INGREDIENTS.get(breakfast, [])

    if ingredients:
        ingredients_text = "\n".join(f"‚Ä¢ {item}" for item in ingredients)
        await update.message.reply_text(
            f"üõí –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫:\n{ingredients_text}"
        )
    else:
        await update.message.reply_text(
            "üõí –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω."
        )

from telegram.ext import ApplicationBuilder
from aiohttp import web

BOT_TOKEN = "8122015182:AAGcVNiLbj6ZK1uNwcfIh3NRZ-w61zoVQHA"
PORT = int(os.environ.get('PORT', 8443))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://bot-menu-inner.onrender.com{WEBHOOK_PATH}"

# Healthcheck –¥–ª—è Render
async def healthcheck(request):
    return web.Response(text="OK")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler (–µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ —Å–æ–∑–¥–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å –µ–≥–æ —Å—é–¥–∞)
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), start)
        ],
        states={
            STATE_START: [MessageHandler(filters.TEXT, action_handler)],
            STATE_ACTION: [MessageHandler(filters.TEXT, action_handler)],
            STATE_BREAKFAST_TYPE: [MessageHandler(filters.TEXT, breakfast_type)],
            STATE_BREAKFAST: [MessageHandler(filters.TEXT, breakfast_chosen)],
            STATE_LUNCH_TYPE: [MessageHandler(filters.TEXT, lunch_type)],
            STATE_LUNCH_CHOICE: [MessageHandler(filters.TEXT, lunch_chosen)],
            STATE_DINNER_TYPE: [MessageHandler(filters.TEXT, dinner_type)],
            STATE_DINNER_CHOICE: [MessageHandler(filters.TEXT, dinner_chosen)],
            STATE_LUNCH_CONFIRM: [MessageHandler(filters.TEXT, lunch_confirm)],
            STATE_DINNER_CONFIRM: [MessageHandler(filters.TEXT, dinner_confirm)],
        },
        fallbacks=[CommandHandler("start", start)]
    )
    app.add_handler(conv)

    # üëá –¥–æ–±–∞–≤–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Render
    app.web_app.router.add_get("/", healthcheck)

    print("‚úÖ Bot is running via Webhook...")

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())